{
    "contents" : "# Reproducible Research: Peer Assessment 1\n\n\n## Loading and preprocessing the data\n```{r libraries}\nlibrary(ggplot2)\nlibrary(chron)\n```\nVerify if dataset exists:\n```{r verifyDataset}\nif(!file.exists(\"./activity.zip\")){\n    download.file(\"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip\",\n                  \"activity.zip\")\n}\n```\nUnpack the dataset:\n```{r getData}\nif(!file.exists(\"./data/activity.csv\")){\n    if(file.exists(\"activity.zip\")){\n        unzip(\"activity.zip\", exdir=\"data\")\n    }else{\n        stop(\"The dataset not exists\")\n    }\n}\n```\nLoad the data:\n```{r loaddata}\ndataAct<-read.csv(\"./data/activity.csv\")\n```\nSummarize the dataset:\n```{r summary}\nsummary(dataAct)\n```\n\n## What is mean total number of steps taken per day?\n\nThe total of steps by day:\n```{r totalsteps}\nstepsbyday<-tapply(dataAct$steps, dataAct$date, sum)\n\nhead(stepsbyday)\n```\nThe histogram of the steps by day:\n```{r plot1, fig.align='center'}\nhist(stepsbyday, xlab=\"Steps by day\", main=\"Histogram\", labels=T)\n```\n\nCalculate the mean and median:\n```{r mm}\nmu<-mean(stepsbyday, na.rm=T)\nmd<-median(stepsbyday, na.rm=T)\n```\n\nThe mean is: `r format(mu,6)` *Steps by day*  \nThe median is: `r format(md,6)` *Steps by day*\n\n## What is the average daily activity pattern?\n\nPlotting the average daily activity:\n```{r plot2, fig.align='center', fig.width=10}\nqplot(interval, steps, data = dataAct, \n             geom = \"line\", \n             ylab=\"Steps\", \n             xlab=\"Interval\", \n             main=\"Average Daily activity\", \n             stat=\"summary\", fun.y = \"mean\")\n```\n\nCalculate the average daily activity\n```{r maxIn}\naverageSteps<-aggregate(steps~interval, FUN=mean, data=dataAct)\nmaxIndex<-which.max(averageSteps$steps)\nval<-averageSteps[maxIndex,]\n```\n\nThe interval `r val$interval` has the maximum average of steps (`r val$steps`): \n```{r plot3, fig.align='center', fig.width=10}\nplot1<-qplot(interval, steps, data = averageSteps, \n             geom = \"line\", \n             ylab=\"Steps\", \n             xlab=\"Interval\", \n             main=\"Average Daily activity\", \n             stat=\"summary\", fun.y = \"mean\")\nplot1+geom_segment(aes(x = val$interval, y = 0, xend = val$interval, yend = val$steps), colour = \"red\" )\n```\n\n## Imputing missing values\n\nCalculate the number of NAs values:\n```{r naValues}\nnaVal<-data.frame(steps=0, date=0, interval=0)\n\nnaVal$steps<-length(which(is.na(dataAct$steps)))\n\nnaVal$date<-length(which(is.na(dataAct$date)))\n\nnaVal$interval<-length(which(is.na(dataAct$interval)))\n```\n\nThe number of rows with NAs from steps column is `r naVal$steps`  \nThe number of rows with NAs from interval column is `r naVal$date`  \nThe number of rows with NAs from date column is `r naVal$interval`\n\nFilling the NA values from Steps columns\n```{r fillNas}\n#Backuo the dataset\ndataActOld<-dataAct\nmissValues<-dataAct[is.na(dataAct$steps), ]\nsummary(missValues)\nmissDate<-sort(as.Date(as.character(unique(missValues$date))))\nmissInterval<-unique(missValues$interval)\n\n#Get the interval Date\nrangeDate<-range(as.Date(as.character(dataAct$date)))\n\n#Get the length of the Dates Column\ndateLen<-length(unique(as.character(dataAct$date)))-1\n\n#Calculate the mean of the date to fill the NA's values\nfor(date in missDate){\n    convDate<-as.character(as.Date(date, origin= \"1970-01-01\"))\n    #Verify if date is in maximum or minimum Date\n    if(!(date %in% rangeDate)){\n        #The midle dates are the mean between the next and before values\n        for(i in -1:-dateLen){\n            tempDate<-as.character(as.Date(date+i, origin= \"1970-01-01\"))\n            dataSub<-subset(dataAct, subset=dataAct$date==tempDate)\n            #Select just the groups without NA's values\n            if(length(dataSub[!is.na(dataSub$steps), \"steps\" ]) > 0){                    \n                valM1<-mean(dataSub$steps)\n                valM2<-0\n                \n                #get the next vakue\n                for(i in 1:dateLen){\n                    tempDate<-as.character(as.Date(date+i, origin= \"1970-01-01\"))\n                    dataSub<-subset(dataAct, subset=dataAct$date==tempDate)\n                    #Select just the groups without NA's values\n                    if(length(dataSub[!is.na(dataSub$steps), \"steps\" ]) > 0){                    \n                        valM2<-mean(dataSub$steps)                                                                    \n                        break\n                    }\n                }\n                valM<-(valM1+valM2)/2\n                dataAct$steps[dataAct$date == convDate]<-valM\n                \n                break\n            }#                 \n        }\n    }else{ #The first date is filled by the mean value of the next date\n        if(date == rangeDate[1]){            \n            for(i in 1:dateLen){\n                tempDate<-as.character(as.Date(date+i, origin= \"1970-01-01\"))\n                dataSub<-subset(dataAct, subset=dataAct$date==tempDate)\n                #Select just the groups without NA's values\n                if(length(dataSub[!is.na(dataSub$steps), \"steps\" ]) > 0){                    \n                    valMean<-mean(dataSub$steps)                    \n                    #Set the value of mean in the NA's rowns of  step\n                    dataAct$steps[dataAct$date == convDate]<-valMean\n                    break\n                }#                 \n            }\n        }else{ #The last date is filled by the mean value of the before date\n            for(i in -1:-dateLen){\n                tempDate<-as.character(as.Date(date+i, origin= \"1970-01-01\"))\n                dataSub<-subset(dataAct, subset=dataAct$date==tempDate)\n                #Select just the groups without NA's values\n                if(length(dataSub[!is.na(dataSub$steps), \"steps\" ]) > 0){                    \n                    valMean<-mean(dataSub$steps)                    \n                    #Set the value of mean in the NA's rowns of  step\n                    dataAct$steps[dataAct$date == convDate]<-valMean\n                    break\n                }#                 \n            }\n        }\n    }\n}\n\n\n```\n\nSaving the new dataset\n```{r}\nwrite.csv(dataAct, \"./data/activity_without_NA.csv\")\n```\n\nPlotting the new histogram\n```{r plot4, fig.align='center'}\nstepsbyday2<-tapply(dataAct$steps, dataAct$date, sum)\nhist(stepsbyday2, xlab=\"Steps by day\", main=\"Histogram\", labels=T)\n```\n\nCalculate the new mean and median:\n```{r mm2}\n\nmu2<-mean(stepsbyday2)\nmd2<-median(stepsbyday2)\n```\n\nThe new mean is: `r format(mu2, 6)` *Steps by day*  \nThe new median is: `r format(md2, 6)` *Steps by day*  \n\nThe difference between the new and old mean/median is:  \n*Mean: `r mu2-mu`*  \n*Median: `r md2-md`*  \n\n*As can be seen, theses values differ from the estimates of the dataset with NA's values.*  \n  \n\n```{r plot5, fig.align='center', fig.width=10}\nstepsbyact<-tapply(dataAct$steps, dataAct$date, sum)\nplot1<-qplot(interval, steps, data = dataAct, \n             geom = \"line\", \n             ylab=\"Steps\", \n             xlab=\"Interval\", \n             main=\"Average Daily activity\", \n             stat=\"summary\", fun.y = \"mean\")\nplot1+geom_line(data=dataActOld, colour=\"blue\", stat=\"summary\", fun.y = \"mean\")\n```\n\n*The main impact of imputing missing data is on the mean value of the steps by day, where these values was estimated by mean of the steps in the neighbor date. In the graph the blue line is the time seris from the dataset with NA's values*\n\n## Are there differences in activity patterns between weekdays and weekends?\nSetting the weekdays and the weekends\n```{r setweek}\ndataAct$week<-factor(is.weekend(dataAct$date), levels=c(T, F), labels=c(\"Weekend\", \"Weekday\"))\nsummary(dataAct)\n```\n    \nPlotting the average number of step by weekend\n```{r plot6, fig.align='center', fig.width=10}\nlibrary(lattice)\nxyplot(steps ~ interval | week,        \n       data=dataAct, \n       type = \"a\", ylab=\"Steps\", xlab=\"Interval\", layout=c(1,2), ylim=c(0,250))\n```\n\n*As can be seen, the activity patterns between weekdays and weekends values are different*\n\n",
    "created" : 1402330498740.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "958572076",
    "id" : "AA5B9914",
    "lastKnownWriteTime" : 1402412520,
    "path" : "~/GitHub/RepData_PeerAssessment1/PA1_template.Rmd",
    "project_path" : "PA1_template.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}